[2023-01-25 14:11:38,150] root INFO: Start time: 2023-01-25 14:11:38.150503
[2023-01-25 14:11:38,240] root INFO: Processing files: /home/koehler/PycharmProjects/alpaca_use_case/code/provenance/../../data/i140703-001.nix,/home/koehler/PycharmProjects/alpaca_use_case/code/provenance/../../data/l101210-001.nix
[2023-01-25 14:11:38,241] alpaca.decorator - INFO: Line 196 -> fig, axes = create_main_plot_objects(n_subjects,
                                         "PSD for each trial type")
[2023-01-25 14:11:38,931] root INFO: Processing /home/koehler/PycharmProjects/alpaca_use_case/code/provenance/../../data/i140703-001.nix; skipping channels None
[2023-01-25 14:11:38,931] alpaca.decorator - INFO: Line 207 -> block = load_data(subject_file)
[2023-01-25 14:21:40,909] root INFO: Extracting starting events for PGLF
[2023-01-25 14:21:40,914] alpaca.decorator - INFO: Line 216 -> events = get_events(block.segments[0],
                                trial_event_labels='CUE-OFF',
                                performance_in_trial_str='correct_trial',
                                belongs_to_trialtype=trial_type)[0]
[2023-01-25 14:22:57,080] root INFO: Extracting trial epochs for PGLF
[2023-01-25 14:22:57,082] alpaca.decorator - INFO: Line 223 -> trial_epochs = add_epoch(block.segments[0], events,
                                     pre=0 * pq.ms, post=500 * pq.ms,
                                     attach_result=False)
[2023-01-25 14:24:11,422] root INFO: Cutting trials of type PGLF
[2023-01-25 14:24:11,431] alpaca.decorator - INFO: Line 229 -> trial_segments = cut_segment_by_epoch(block.segments[0],
                                                  trial_epochs)
[2023-01-25 14:25:33,020] root INFO: Computing PSD
[2023-01-25 14:25:33,029] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:33,092] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:33,211] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
/home/koehler/anaconda3/envs/provenance/lib/python3.9/site-packages/scipy/signal/filter_design.py:1630: BadCoefficients: Badly conditioned filter coefficients (numerator): the results may be meaningless
  warnings.warn("Badly conditioned filter coefficients (numerator): the "
[2023-01-25 14:25:33,308] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:33,327] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:33,330] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:33,401] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:33,449] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:33,516] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:33,525] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:33,527] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:33,590] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:33,637] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:33,708] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:33,712] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:33,713] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:33,779] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:33,826] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:33,892] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:33,896] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:33,897] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:33,962] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:34,010] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:34,076] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:34,080] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:34,081] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:34,146] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:34,194] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:34,259] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:34,266] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:34,267] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:34,334] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:34,383] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:34,449] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:34,452] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:34,453] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:34,519] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:34,568] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:34,630] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:34,633] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:34,635] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:34,700] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:34,748] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:34,814] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:34,817] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:34,818] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:34,885] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:34,935] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:35,003] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:35,006] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:35,007] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:35,073] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:35,122] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:35,188] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:35,191] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:35,192] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:35,258] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:35,315] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:35,379] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:35,382] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:35,383] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:35,450] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:35,501] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:35,566] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:35,569] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:35,570] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:35,637] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:35,688] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:35,754] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:35,757] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:35,758] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:35,825] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:35,875] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:35,943] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:35,947] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:35,948] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:36,015] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:36,073] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:36,141] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:36,144] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:36,146] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:36,210] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:36,259] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:36,325] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:36,328] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:36,330] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:36,395] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:36,444] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:36,510] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:36,513] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:36,515] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:36,580] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:36,629] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:36,699] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:36,702] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:36,703] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:36,770] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:36,818] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:36,884] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:36,887] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:36,888] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:36,954] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:37,003] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:37,068] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:37,071] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:37,072] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:37,137] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:37,185] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:37,251] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:37,254] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:37,256] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:37,322] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:37,370] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:37,436] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:37,440] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:37,441] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:37,506] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:37,555] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:37,622] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:37,625] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:37,626] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:37,692] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:37,741] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:37,807] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:37,810] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:37,811] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:37,876] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:37,926] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:37,991] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:37,994] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:37,995] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:38,060] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:38,109] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:38,174] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:38,177] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:38,178] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:38,244] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:38,293] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:38,357] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:38,361] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:38,362] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:38,427] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:38,476] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:38,542] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:38,545] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:38,547] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:38,612] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:38,661] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:38,728] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:38,731] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:38,739] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:38,805] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:38,854] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:38,924] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:38,927] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:38,928] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:38,995] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:39,046] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:39,119] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:39,122] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:39,124] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:39,191] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:39,242] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:39,309] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:39,312] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:39,314] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:39,381] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:39,431] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:39,499] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:39,502] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:39,503] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:25:39,570] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:25:39,622] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:25:39,690] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:25:39,693] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:25:39,695] alpaca.decorator - INFO: Line 258 -> all_psds_stacked = vstack_quantities(*all_psds)
[2023-01-25 14:25:39,726] alpaca.decorator - INFO: Line 259 -> psd_mean = mean(all_psds_stacked, axis=0)
[2023-01-25 14:25:39,727] alpaca.decorator - INFO: Line 260 -> psd_sem = sem(all_psds_stacked, axis=0)
[2023-01-25 14:25:39,731] alpaca.decorator - INFO: Line 264 -> plot_lfp_psd(axes[sub_idx], frequencies, psd_mean, psd_sem,
                         color=trial_types[trial_type], lw=1,
                         label=trial_type, freq_range=[0, 49])
[2023-01-25 14:25:39,754] root INFO: Extracting starting events for PGHF
[2023-01-25 14:25:39,755] alpaca.decorator - INFO: Line 216 -> events = get_events(block.segments[0],
                                trial_event_labels='CUE-OFF',
                                performance_in_trial_str='correct_trial',
                                belongs_to_trialtype=trial_type)[0]
[2023-01-25 14:26:54,755] root INFO: Extracting trial epochs for PGHF
[2023-01-25 14:26:54,756] alpaca.decorator - INFO: Line 223 -> trial_epochs = add_epoch(block.segments[0], events,
                                     pre=0 * pq.ms, post=500 * pq.ms,
                                     attach_result=False)
[2023-01-25 14:28:09,052] root INFO: Cutting trials of type PGHF
[2023-01-25 14:28:09,053] alpaca.decorator - INFO: Line 229 -> trial_segments = cut_segment_by_epoch(block.segments[0],
                                                  trial_epochs)
[2023-01-25 14:29:31,550] root INFO: Computing PSD
[2023-01-25 14:29:31,550] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:31,619] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:31,676] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
/home/koehler/anaconda3/envs/provenance/lib/python3.9/site-packages/scipy/signal/filter_design.py:1630: BadCoefficients: Badly conditioned filter coefficients (numerator): the results may be meaningless
  warnings.warn("Badly conditioned filter coefficients (numerator): the "
[2023-01-25 14:29:31,767] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:31,777] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:31,778] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:31,849] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:31,906] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:31,996] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:32,004] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:32,007] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:32,090] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:32,155] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:32,256] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:32,260] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:32,262] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:32,344] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:32,408] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:32,500] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:32,508] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:32,510] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:32,595] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:32,659] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:32,753] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:32,758] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:32,760] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:32,833] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:32,881] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:32,947] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:32,950] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:32,952] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:33,017] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:33,069] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:33,138] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:33,141] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:33,143] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:33,212] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:33,263] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:33,333] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:33,336] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:33,338] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:33,404] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:33,452] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:33,518] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:33,521] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:33,523] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:33,588] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:33,637] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:33,705] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:33,708] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:33,710] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:33,775] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:33,824] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:33,890] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:33,893] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:33,895] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:33,960] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:34,009] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:34,075] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:34,082] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:34,084] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:34,150] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:34,200] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:34,267] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:34,271] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:34,272] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:34,338] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:34,389] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:34,455] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:34,458] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:34,460] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:34,528] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:34,579] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:34,651] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:34,654] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:34,656] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:34,723] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:34,774] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:34,844] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:34,847] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:34,849] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:34,916] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:34,966] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:35,037] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:35,041] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:35,042] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:35,109] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:35,162] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:35,242] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:35,245] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:35,247] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:35,314] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:35,364] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:35,434] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:35,438] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:35,439] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:35,507] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:35,557] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:35,632] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:35,635] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:35,637] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:35,705] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:35,756] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:35,823] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:35,826] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:35,827] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:35,896] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:35,952] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:36,047] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:36,051] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:36,053] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:36,133] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:36,188] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:36,257] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:36,261] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:36,263] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:36,332] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:36,382] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:36,451] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:36,454] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:36,456] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:36,523] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:36,574] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:36,644] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:36,647] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:36,649] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:36,720] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:36,783] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:36,856] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:36,860] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:36,861] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:36,929] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:36,981] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:37,052] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:37,056] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:37,057] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:37,126] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:37,178] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:37,247] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:37,251] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:37,252] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:37,321] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:37,372] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:37,444] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:37,453] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:37,455] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:37,522] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:37,570] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:37,638] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:37,641] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:37,643] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:37,710] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:37,758] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:37,828] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:37,831] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:37,833] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:37,900] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:37,949] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:38,022] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:38,025] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:38,027] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:38,094] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:38,143] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:38,213] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:38,216] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:38,218] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:38,284] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:38,332] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:38,403] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:38,407] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:38,408] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:38,474] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:38,522] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:38,594] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:38,597] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:38,599] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:29:38,666] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:29:38,715] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:29:38,780] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:29:38,784] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:29:38,785] alpaca.decorator - INFO: Line 258 -> all_psds_stacked = vstack_quantities(*all_psds)
[2023-01-25 14:29:38,808] alpaca.decorator - INFO: Line 259 -> psd_mean = mean(all_psds_stacked, axis=0)
[2023-01-25 14:29:38,809] alpaca.decorator - INFO: Line 260 -> psd_sem = sem(all_psds_stacked, axis=0)
[2023-01-25 14:29:38,810] alpaca.decorator - INFO: Line 264 -> plot_lfp_psd(axes[sub_idx], frequencies, psd_mean, psd_sem,
                         color=trial_types[trial_type], lw=1,
                         label=trial_type, freq_range=[0, 49])
[2023-01-25 14:29:38,812] root INFO: Extracting starting events for SGLF
[2023-01-25 14:29:38,813] alpaca.decorator - INFO: Line 216 -> events = get_events(block.segments[0],
                                trial_event_labels='CUE-OFF',
                                performance_in_trial_str='correct_trial',
                                belongs_to_trialtype=trial_type)[0]
[2023-01-25 14:30:56,309] root INFO: Extracting trial epochs for SGLF
[2023-01-25 14:30:56,309] alpaca.decorator - INFO: Line 223 -> trial_epochs = add_epoch(block.segments[0], events,
                                     pre=0 * pq.ms, post=500 * pq.ms,
                                     attach_result=False)
[2023-01-25 14:32:11,170] root INFO: Cutting trials of type SGLF
[2023-01-25 14:32:11,171] alpaca.decorator - INFO: Line 229 -> trial_segments = cut_segment_by_epoch(block.segments[0],
                                                  trial_epochs)
[2023-01-25 14:33:33,815] root INFO: Computing PSD
[2023-01-25 14:33:33,816] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:33,884] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:34,437] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
/home/koehler/anaconda3/envs/provenance/lib/python3.9/site-packages/scipy/signal/filter_design.py:1630: BadCoefficients: Badly conditioned filter coefficients (numerator): the results may be meaningless
  warnings.warn("Badly conditioned filter coefficients (numerator): the "
[2023-01-25 14:33:35,403] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:35,413] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:35,417] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:35,483] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:36,109] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:36,203] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:36,212] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:36,215] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:36,282] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:36,364] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:36,453] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:36,457] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:36,460] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:36,527] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:36,589] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:36,666] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:36,670] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:36,671] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:36,739] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:36,788] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:36,855] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:36,859] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:36,860] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:36,926] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:36,976] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:37,045] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:37,048] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:37,049] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:37,115] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:37,164] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:37,232] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:37,235] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:37,237] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:37,303] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:37,352] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:37,422] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:37,426] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:37,427] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:37,494] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:37,545] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:37,612] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:37,615] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:37,616] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:37,682] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:37,732] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:37,799] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:37,803] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:37,804] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:37,870] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:37,919] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:37,988] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:37,991] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:37,993] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:38,058] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:38,107] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:38,176] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:38,179] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:38,181] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:38,247] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:38,296] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:38,363] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:38,374] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:38,376] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:38,442] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:38,491] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:38,560] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:38,563] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:38,564] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:38,630] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:38,681] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:38,754] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:38,757] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:38,759] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:38,826] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:38,876] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:38,945] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:38,948] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:38,949] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:39,016] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:39,067] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:39,135] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:39,138] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:39,140] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:39,206] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:39,257] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:39,325] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:39,328] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:39,330] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:39,398] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:39,448] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:39,517] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:39,520] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:39,521] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:39,588] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:39,638] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:39,707] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:39,710] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:39,711] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:39,778] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:39,828] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:39,897] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:39,900] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:39,902] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:39,969] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:40,021] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:40,090] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:40,093] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:40,095] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:40,161] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:40,212] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:40,279] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:40,282] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:40,283] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:40,350] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:40,401] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:40,469] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:40,472] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:40,473] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:40,541] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:40,592] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:40,659] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:40,662] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:40,664] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:40,732] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:40,782] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:40,851] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:40,854] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:40,855] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:40,923] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:40,973] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:41,041] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:41,044] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:41,046] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:41,113] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:41,166] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:41,235] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:41,238] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:41,240] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:41,307] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:41,358] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:41,427] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:41,430] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:41,431] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:41,497] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:41,548] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:41,617] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:41,620] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:41,622] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:41,688] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:41,740] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:41,809] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:41,822] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:41,826] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:41,891] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:41,940] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:42,006] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:42,010] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:42,011] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:42,077] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:42,125] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:42,192] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:42,195] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:42,197] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:42,263] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:42,312] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:42,384] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:42,387] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:42,389] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:33:42,455] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:33:42,503] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:33:42,572] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:33:42,576] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:33:42,577] alpaca.decorator - INFO: Line 258 -> all_psds_stacked = vstack_quantities(*all_psds)
[2023-01-25 14:33:42,600] alpaca.decorator - INFO: Line 259 -> psd_mean = mean(all_psds_stacked, axis=0)
[2023-01-25 14:33:42,601] alpaca.decorator - INFO: Line 260 -> psd_sem = sem(all_psds_stacked, axis=0)
[2023-01-25 14:33:42,611] alpaca.decorator - INFO: Line 264 -> plot_lfp_psd(axes[sub_idx], frequencies, psd_mean, psd_sem,
                         color=trial_types[trial_type], lw=1,
                         label=trial_type, freq_range=[0, 49])
[2023-01-25 14:33:42,617] root INFO: Extracting starting events for SGHF
[2023-01-25 14:33:42,617] alpaca.decorator - INFO: Line 216 -> events = get_events(block.segments[0],
                                trial_event_labels='CUE-OFF',
                                performance_in_trial_str='correct_trial',
                                belongs_to_trialtype=trial_type)[0]
[2023-01-25 14:34:57,184] root INFO: Extracting trial epochs for SGHF
[2023-01-25 14:34:57,185] alpaca.decorator - INFO: Line 223 -> trial_epochs = add_epoch(block.segments[0], events,
                                     pre=0 * pq.ms, post=500 * pq.ms,
                                     attach_result=False)
[2023-01-25 14:36:11,385] root INFO: Cutting trials of type SGHF
[2023-01-25 14:36:11,385] alpaca.decorator - INFO: Line 229 -> trial_segments = cut_segment_by_epoch(block.segments[0],
                                                  trial_epochs)
[2023-01-25 14:37:32,995] root INFO: Computing PSD
[2023-01-25 14:37:32,995] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:33,064] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:33,126] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
/home/koehler/anaconda3/envs/provenance/lib/python3.9/site-packages/scipy/signal/filter_design.py:1630: BadCoefficients: Badly conditioned filter coefficients (numerator): the results may be meaningless
  warnings.warn("Badly conditioned filter coefficients (numerator): the "
[2023-01-25 14:37:33,223] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:33,232] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:33,233] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:33,298] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:33,346] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:33,412] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:33,420] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:33,423] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:33,487] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:33,534] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:33,601] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:33,604] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:33,605] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:33,670] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:33,719] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:33,784] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:33,790] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:33,792] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:33,856] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:33,906] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:33,972] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:33,975] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:33,976] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:34,043] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:34,094] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:34,161] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:34,164] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:34,165] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:34,232] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:34,282] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:34,347] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:34,350] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:34,352] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:34,419] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:34,478] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:34,547] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:34,550] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:34,551] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:34,618] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:34,668] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:34,734] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:34,737] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:34,739] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:34,806] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:34,855] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:34,922] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:34,925] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:34,927] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:34,993] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:35,043] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:35,111] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:35,114] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:35,116] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:35,183] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:35,233] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:35,299] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:35,312] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:35,313] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:35,379] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:35,428] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:35,492] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:35,495] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:35,497] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:35,563] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:35,613] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:35,678] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:35,681] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:35,682] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:35,749] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:35,799] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:35,864] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:35,867] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:35,868] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:35,934] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:35,984] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:36,052] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:36,055] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:36,056] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:36,122] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:36,172] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:36,239] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:36,242] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:36,243] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:36,310] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:36,360] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:36,427] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:36,430] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:36,432] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:36,498] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:36,548] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:36,614] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:36,617] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:36,619] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:36,685] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:36,736] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:36,800] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:36,803] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:36,804] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:36,871] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:36,921] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:36,986] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:36,989] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:36,990] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:37,056] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:37,106] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:37,173] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:37,187] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:37,190] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:37,262] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:37,311] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:37,377] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:37,380] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:37,381] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:37,448] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:37,497] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:37,563] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:37,566] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:37,567] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:37,633] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:37,683] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:37,749] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:37,752] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:37,754] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:37,820] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:37,879] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:37,945] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:37,948] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:37,949] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:38,016] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:38,066] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:38,132] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:38,135] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:38,136] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:38,203] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:38,254] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:38,321] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:38,324] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:38,325] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:38,395] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:38,446] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:38,513] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:38,516] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:38,518] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:38,584] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:38,634] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:38,701] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:38,705] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:38,711] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:38,778] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:38,826] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:38,891] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:38,894] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:38,895] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:38,960] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:39,010] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:39,077] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:39,080] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:39,082] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:39,147] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:39,196] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:39,262] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:39,265] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:39,266] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:39,332] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:39,381] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:39,447] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:39,450] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:39,452] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:39,518] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:39,567] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:39,633] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:39,636] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:39,638] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:37:39,703] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:37:39,752] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:37:39,818] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:37:39,821] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:37:39,823] alpaca.decorator - INFO: Line 258 -> all_psds_stacked = vstack_quantities(*all_psds)
[2023-01-25 14:37:39,845] alpaca.decorator - INFO: Line 259 -> psd_mean = mean(all_psds_stacked, axis=0)
[2023-01-25 14:37:39,846] alpaca.decorator - INFO: Line 260 -> psd_sem = sem(all_psds_stacked, axis=0)
[2023-01-25 14:37:39,847] alpaca.decorator - INFO: Line 264 -> plot_lfp_psd(axes[sub_idx], frequencies, psd_mean, psd_sem,
                         color=trial_types[trial_type], lw=1,
                         label=trial_type, freq_range=[0, 49])
[2023-01-25 14:37:39,860] alpaca.decorator - INFO: Line 270 -> set_title(axes[sub_idx], block.annotations['subject_name'])
[2023-01-25 14:38:04,631] root INFO: Processing /home/koehler/PycharmProjects/alpaca_use_case/code/provenance/../../data/l101210-001.nix; skipping channels [2, 4]
[2023-01-25 14:38:04,639] alpaca.decorator - INFO: Line 207 -> block = load_data(subject_file)
[2023-01-25 14:46:13,734] root INFO: Extracting starting events for PGLF
[2023-01-25 14:46:13,744] alpaca.decorator - INFO: Line 216 -> events = get_events(block.segments[0],
                                trial_event_labels='CUE-OFF',
                                performance_in_trial_str='correct_trial',
                                belongs_to_trialtype=trial_type)[0]
[2023-01-25 14:47:05,077] root INFO: Extracting trial epochs for PGLF
[2023-01-25 14:47:05,079] alpaca.decorator - INFO: Line 223 -> trial_epochs = add_epoch(block.segments[0], events,
                                     pre=0 * pq.ms, post=500 * pq.ms,
                                     attach_result=False)
[2023-01-25 14:47:55,757] root INFO: Cutting trials of type PGLF
[2023-01-25 14:47:55,758] alpaca.decorator - INFO: Line 229 -> trial_segments = cut_segment_by_epoch(block.segments[0],
                                                  trial_epochs)
[2023-01-25 14:48:53,804] root INFO: Computing PSD
[2023-01-25 14:48:53,808] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:53,884] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:53,978] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
/home/koehler/anaconda3/envs/provenance/lib/python3.9/site-packages/scipy/signal/filter_design.py:1630: BadCoefficients: Badly conditioned filter coefficients (numerator): the results may be meaningless
  warnings.warn("Badly conditioned filter coefficients (numerator): the "
[2023-01-25 14:48:54,049] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:54,060] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:54,063] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:54,142] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:54,187] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:54,251] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:54,255] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:54,256] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:54,333] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:54,378] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:54,436] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:54,439] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:54,441] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:54,519] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:54,564] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:54,622] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:54,625] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:54,627] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:54,706] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:54,751] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:54,812] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:54,814] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:54,816] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:54,895] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:54,940] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:54,998] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:55,001] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:55,002] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:55,081] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:55,127] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:55,185] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:55,188] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:55,189] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:55,270] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:55,312] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:55,370] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:55,373] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:55,374] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:55,453] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:55,499] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:55,559] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:55,561] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:55,563] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:55,642] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:55,688] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:55,748] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:55,750] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:55,752] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:55,831] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:55,877] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:55,936] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:55,939] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:55,940] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:56,021] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:56,067] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:56,126] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:56,129] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:56,130] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:56,210] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:56,256] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:56,316] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:56,319] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:56,320] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:56,400] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:56,446] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:56,506] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:56,509] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:56,510] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:56,591] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:56,638] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:56,697] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:56,700] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:56,701] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:56,781] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:56,828] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:56,887] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:56,890] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:56,892] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:56,972] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:57,018] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:57,077] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:57,080] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:57,081] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:57,161] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:57,208] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:57,267] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:57,270] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:57,272] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:57,352] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:57,398] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:57,457] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:57,460] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:57,461] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:57,540] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:57,586] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:57,647] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:57,650] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:57,651] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:57,730] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:57,776] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:57,837] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:57,840] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:57,841] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:57,920] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:57,966] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:58,025] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:58,028] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:58,029] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:58,109] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:58,155] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:58,220] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:58,224] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:58,226] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:58,306] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:58,353] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:58,414] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:58,417] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:58,418] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:58,501] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:58,547] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:58,607] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:58,609] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:58,611] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:58,690] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:58,732] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:58,788] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:58,791] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:58,792] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:58,871] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:58,916] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:58,975] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:58,978] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:58,979] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:59,058] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:59,104] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:59,162] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:59,165] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:59,166] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:59,245] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:59,290] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:59,349] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:59,352] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:59,353] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:59,433] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:59,480] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:59,535] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:59,538] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:59,539] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:48:59,616] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:48:59,661] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:48:59,719] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:48:59,722] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:48:59,727] alpaca.decorator - INFO: Line 258 -> all_psds_stacked = vstack_quantities(*all_psds)
[2023-01-25 14:48:59,746] alpaca.decorator - INFO: Line 259 -> psd_mean = mean(all_psds_stacked, axis=0)
[2023-01-25 14:48:59,747] alpaca.decorator - INFO: Line 260 -> psd_sem = sem(all_psds_stacked, axis=0)
[2023-01-25 14:48:59,750] alpaca.decorator - INFO: Line 264 -> plot_lfp_psd(axes[sub_idx], frequencies, psd_mean, psd_sem,
                         color=trial_types[trial_type], lw=1,
                         label=trial_type, freq_range=[0, 49])
[2023-01-25 14:48:59,770] root INFO: Extracting starting events for PGHF
[2023-01-25 14:48:59,770] alpaca.decorator - INFO: Line 216 -> events = get_events(block.segments[0],
                                trial_event_labels='CUE-OFF',
                                performance_in_trial_str='correct_trial',
                                belongs_to_trialtype=trial_type)[0]
[2023-01-25 14:49:51,434] root INFO: Extracting trial epochs for PGHF
[2023-01-25 14:49:51,434] alpaca.decorator - INFO: Line 223 -> trial_epochs = add_epoch(block.segments[0], events,
                                     pre=0 * pq.ms, post=500 * pq.ms,
                                     attach_result=False)
[2023-01-25 14:50:43,636] root INFO: Cutting trials of type PGHF
[2023-01-25 14:50:43,636] alpaca.decorator - INFO: Line 229 -> trial_segments = cut_segment_by_epoch(block.segments[0],
                                                  trial_epochs)
[2023-01-25 14:51:43,458] root INFO: Computing PSD
[2023-01-25 14:51:43,459] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:43,535] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:43,580] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
/home/koehler/anaconda3/envs/provenance/lib/python3.9/site-packages/scipy/signal/filter_design.py:1630: BadCoefficients: Badly conditioned filter coefficients (numerator): the results may be meaningless
  warnings.warn("Badly conditioned filter coefficients (numerator): the "
[2023-01-25 14:51:43,637] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:43,640] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:43,641] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:43,719] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:43,763] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:43,822] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:43,825] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:43,826] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:43,903] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:43,947] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:44,005] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:44,008] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:44,009] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:44,085] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:44,129] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:44,187] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:44,189] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:44,191] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:44,267] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:44,313] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:44,370] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:44,373] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:44,374] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:44,451] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:44,495] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:44,553] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:44,555] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:44,557] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:44,633] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:44,678] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:44,736] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:44,739] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:44,740] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:44,816] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:44,860] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:44,920] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:44,922] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:44,924] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:44,999] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:45,044] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:45,101] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:45,104] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:45,105] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:45,182] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:45,226] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:45,283] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:45,286] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:45,287] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:45,364] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:45,408] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:45,466] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:45,468] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:45,470] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:45,547] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:45,592] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:45,650] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:45,652] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:45,653] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:45,730] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:45,774] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:45,832] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:45,835] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:45,836] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:45,913] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:45,957] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:46,015] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:46,018] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:46,019] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:46,096] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:46,141] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:46,199] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:46,201] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:46,203] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:46,279] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:46,324] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:46,386] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:46,390] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:46,392] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:46,468] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:46,513] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:46,571] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:46,574] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:46,575] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:46,651] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:46,698] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:46,756] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:46,759] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:46,760] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:46,837] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:46,882] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:46,939] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:46,942] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:46,943] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:47,019] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:47,064] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:47,122] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:47,124] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:47,126] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:47,202] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:47,246] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:47,307] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:47,310] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:47,311] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:47,387] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:47,432] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:47,489] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:47,492] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:47,494] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:47,571] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:47,615] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:47,672] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:47,675] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:47,676] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:47,752] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:47,797] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:47,854] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:47,857] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:47,858] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:47,936] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:47,981] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:48,038] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:48,041] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:48,042] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:48,118] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:48,163] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:48,221] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:48,224] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:48,225] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:48,305] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:48,356] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:48,430] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:48,434] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:48,436] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:48,515] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:48,560] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:48,618] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:48,621] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:48,622] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:48,699] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:48,743] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:48,801] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:48,803] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:48,805] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:48,881] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:48,925] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:48,983] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:48,985] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:48,987] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:49,063] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:49,109] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:49,167] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:49,170] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:49,171] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:49,247] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:49,292] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:49,351] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:49,353] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:49,355] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:51:49,433] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:51:49,478] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:51:49,537] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:51:49,540] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:51:49,541] alpaca.decorator - INFO: Line 258 -> all_psds_stacked = vstack_quantities(*all_psds)
[2023-01-25 14:51:49,561] alpaca.decorator - INFO: Line 259 -> psd_mean = mean(all_psds_stacked, axis=0)
[2023-01-25 14:51:49,562] alpaca.decorator - INFO: Line 260 -> psd_sem = sem(all_psds_stacked, axis=0)
[2023-01-25 14:51:49,563] alpaca.decorator - INFO: Line 264 -> plot_lfp_psd(axes[sub_idx], frequencies, psd_mean, psd_sem,
                         color=trial_types[trial_type], lw=1,
                         label=trial_type, freq_range=[0, 49])
[2023-01-25 14:51:49,565] root INFO: Extracting starting events for SGLF
[2023-01-25 14:51:49,565] alpaca.decorator - INFO: Line 216 -> events = get_events(block.segments[0],
                                trial_event_labels='CUE-OFF',
                                performance_in_trial_str='correct_trial',
                                belongs_to_trialtype=trial_type)[0]
[2023-01-25 14:52:40,485] root INFO: Extracting trial epochs for SGLF
[2023-01-25 14:52:40,485] alpaca.decorator - INFO: Line 223 -> trial_epochs = add_epoch(block.segments[0], events,
                                     pre=0 * pq.ms, post=500 * pq.ms,
                                     attach_result=False)
[2023-01-25 14:53:31,404] root INFO: Cutting trials of type SGLF
[2023-01-25 14:53:31,405] alpaca.decorator - INFO: Line 229 -> trial_segments = cut_segment_by_epoch(block.segments[0],
                                                  trial_epochs)
[2023-01-25 14:54:33,452] root INFO: Computing PSD
[2023-01-25 14:54:33,452] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:33,530] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:33,574] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
/home/koehler/anaconda3/envs/provenance/lib/python3.9/site-packages/scipy/signal/filter_design.py:1630: BadCoefficients: Badly conditioned filter coefficients (numerator): the results may be meaningless
  warnings.warn("Badly conditioned filter coefficients (numerator): the "
[2023-01-25 14:54:33,633] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:33,635] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:33,637] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:33,714] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:33,758] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:33,816] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:33,819] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:33,820] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:33,897] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:33,941] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:34,002] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:34,005] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:34,006] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:34,082] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:34,126] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:34,184] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:34,187] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:34,188] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:34,264] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:34,308] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:34,368] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:34,370] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:34,372] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:34,448] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:34,492] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:34,550] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:34,553] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:34,554] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:34,632] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:34,677] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:34,735] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:34,738] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:34,739] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:34,816] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:34,860] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:34,917] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:34,920] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:34,921] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:34,998] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:35,042] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:35,103] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:35,105] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:35,107] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:35,184] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:35,228] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:35,285] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:35,288] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:35,289] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:35,365] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:35,409] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:35,467] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:35,470] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:35,471] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:35,548] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:35,591] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:35,650] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:35,652] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:35,654] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:35,730] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:35,774] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:35,833] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:35,835] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:35,837] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:35,913] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:35,957] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:36,015] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:36,017] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:36,019] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:36,095] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:36,138] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:36,197] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:36,200] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:36,201] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:36,277] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:36,321] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:36,380] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:36,384] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:36,386] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:36,462] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:36,506] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:36,564] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:36,567] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:36,569] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:36,645] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:36,690] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:36,748] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:36,751] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:36,752] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:36,831] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:36,877] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:36,940] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:36,943] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:36,944] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:37,022] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:37,066] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:37,125] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:37,128] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:37,129] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:37,206] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:37,250] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:37,308] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:37,311] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:37,312] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:37,389] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:37,433] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:37,491] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:37,494] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:37,495] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:37,572] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:37,617] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:37,691] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:37,694] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:37,696] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:37,778] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:37,821] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:37,879] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:37,882] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:37,883] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:37,960] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:38,004] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:38,063] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:38,065] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:38,067] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:38,143] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:38,187] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:38,245] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:38,248] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:38,249] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:38,326] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:38,371] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:38,430] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:38,432] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:38,434] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:38,510] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:38,553] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:38,612] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:38,615] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:38,616] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:38,693] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:38,737] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:38,795] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:38,798] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:38,799] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:38,875] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:38,919] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:38,978] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:38,981] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:38,982] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:39,059] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:39,103] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:39,163] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:39,166] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:39,167] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:39,244] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:39,287] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:39,346] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:39,349] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:39,350] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:39,426] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:39,470] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:39,533] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:39,536] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:39,537] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:39,613] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:39,657] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:39,715] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:39,718] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:39,719] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:39,796] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:39,840] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:39,898] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:39,901] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:39,902] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:39,979] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:40,023] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:40,081] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:40,084] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:40,086] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:40,163] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:40,208] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:40,267] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:40,270] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:40,271] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:40,347] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:40,391] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:40,450] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:40,452] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:40,454] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:40,531] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:40,575] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:40,633] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:40,636] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:40,637] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:40,714] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:40,759] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:40,818] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:40,821] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:40,822] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:54:40,899] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:54:40,943] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:54:41,001] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:54:41,004] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:54:41,005] alpaca.decorator - INFO: Line 258 -> all_psds_stacked = vstack_quantities(*all_psds)
[2023-01-25 14:54:41,030] alpaca.decorator - INFO: Line 259 -> psd_mean = mean(all_psds_stacked, axis=0)
[2023-01-25 14:54:41,031] alpaca.decorator - INFO: Line 260 -> psd_sem = sem(all_psds_stacked, axis=0)
[2023-01-25 14:54:41,031] alpaca.decorator - INFO: Line 264 -> plot_lfp_psd(axes[sub_idx], frequencies, psd_mean, psd_sem,
                         color=trial_types[trial_type], lw=1,
                         label=trial_type, freq_range=[0, 49])
[2023-01-25 14:54:41,034] root INFO: Extracting starting events for SGHF
[2023-01-25 14:54:41,034] alpaca.decorator - INFO: Line 216 -> events = get_events(block.segments[0],
                                trial_event_labels='CUE-OFF',
                                performance_in_trial_str='correct_trial',
                                belongs_to_trialtype=trial_type)[0]
[2023-01-25 14:55:31,885] root INFO: Extracting trial epochs for SGHF
[2023-01-25 14:55:31,885] alpaca.decorator - INFO: Line 223 -> trial_epochs = add_epoch(block.segments[0], events,
                                     pre=0 * pq.ms, post=500 * pq.ms,
                                     attach_result=False)
[2023-01-25 14:56:23,420] root INFO: Cutting trials of type SGHF
[2023-01-25 14:56:23,420] alpaca.decorator - INFO: Line 229 -> trial_segments = cut_segment_by_epoch(block.segments[0],
                                                  trial_epochs)
[2023-01-25 14:57:21,867] root INFO: Computing PSD
[2023-01-25 14:57:21,868] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:21,945] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:21,991] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
/home/koehler/anaconda3/envs/provenance/lib/python3.9/site-packages/scipy/signal/filter_design.py:1630: BadCoefficients: Badly conditioned filter coefficients (numerator): the results may be meaningless
  warnings.warn("Badly conditioned filter coefficients (numerator): the "
[2023-01-25 14:57:22,049] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:22,052] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:22,053] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:22,129] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:22,171] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:22,227] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:22,230] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:22,231] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:22,309] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:22,354] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:22,411] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:22,414] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:22,415] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:22,492] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:22,534] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:22,590] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:22,593] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:22,594] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:22,671] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:22,717] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:22,775] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:22,778] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:22,779] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:22,855] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:22,897] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:22,953] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:22,956] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:22,957] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:23,034] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:23,079] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:23,136] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:23,139] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:23,140] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:23,217] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:23,259] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:23,314] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:23,316] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:23,317] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:23,394] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:23,438] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:23,496] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:23,499] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:23,500] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:23,577] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:23,621] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:23,678] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:23,681] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:23,683] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:23,760] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:23,805] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:23,862] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:23,865] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:23,866] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:23,943] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:23,987] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:24,045] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:24,048] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:24,049] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:24,126] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:24,168] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:24,224] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:24,226] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:24,227] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:24,304] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:24,349] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:24,406] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:24,409] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:24,410] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:24,486] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:24,529] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:24,584] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:24,587] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:24,588] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:24,664] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:24,709] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:24,766] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:24,769] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:24,770] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:24,847] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:24,889] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:24,945] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:24,947] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:24,948] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:25,025] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:25,070] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:25,127] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:25,130] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:25,131] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:25,208] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:25,253] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:25,310] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:25,313] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:25,314] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:25,390] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:25,434] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:25,492] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:25,495] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:25,496] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:25,573] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:25,623] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:25,681] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:25,684] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:25,685] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:25,763] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:25,805] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:25,862] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:25,864] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:25,865] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:25,943] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:25,989] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:26,046] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:26,049] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:26,050] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:26,127] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:26,170] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:26,226] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:26,229] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:26,230] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:26,307] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:26,352] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:26,409] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:26,412] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:26,413] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:26,491] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:26,534] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:26,603] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:26,606] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:26,607] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:26,687] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:26,732] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:26,790] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:26,793] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:26,794] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:26,871] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:26,916] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:26,974] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:26,976] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:26,978] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:27,058] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:27,103] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:27,163] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:27,167] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:27,168] alpaca.decorator - INFO: Line 240 -> signal = select_channels(trial.analogsignals[-1], skip)
[2023-01-25 14:57:27,246] alpaca.decorator - INFO: Line 242 -> filtered_signal = butter(signal,
                                         lowpass_frequency=250 * pq.Hz)
[2023-01-25 14:57:27,291] alpaca.decorator - INFO: Line 245 -> downsampled_signal = filtered_signal.downsample(60)
[2023-01-25 14:57:27,349] alpaca.decorator - INFO: Line 247 -> freqs, psd = welch_psd(downsampled_signal,
                                       frequency_resolution=2 * pq.Hz)
[2023-01-25 14:57:27,352] alpaca.decorator - INFO: Line 250 -> avg_psd = mean(psd, axis=0)
[2023-01-25 14:57:27,353] alpaca.decorator - INFO: Line 258 -> all_psds_stacked = vstack_quantities(*all_psds)
[2023-01-25 14:57:27,372] alpaca.decorator - INFO: Line 259 -> psd_mean = mean(all_psds_stacked, axis=0)
[2023-01-25 14:57:27,373] alpaca.decorator - INFO: Line 260 -> psd_sem = sem(all_psds_stacked, axis=0)
[2023-01-25 14:57:28,518] alpaca.decorator - INFO: Line 264 -> plot_lfp_psd(axes[sub_idx], frequencies, psd_mean, psd_sem,
                         color=trial_types[trial_type], lw=1,
                         label=trial_type, freq_range=[0, 49])
[2023-01-25 14:57:28,539] alpaca.decorator - INFO: Line 270 -> set_title(axes[sub_idx], block.annotations['subject_name'])
[2023-01-25 14:57:45,482] root INFO: Saving output to /home/koehler/PycharmProjects/alpaca_use_case/code/provenance/../../outputs/provenance/R2G_PSD_all_subjects.png
[2023-01-25 14:57:45,483] alpaca.decorator - INFO: Line 275 -> save_plot(fig, out_file, format='png', dpi=300)
[2023-01-25 14:58:34,257] root INFO: End time: 2023-01-25 14:58:34.249187; Total processing time:0:46:56.098684
